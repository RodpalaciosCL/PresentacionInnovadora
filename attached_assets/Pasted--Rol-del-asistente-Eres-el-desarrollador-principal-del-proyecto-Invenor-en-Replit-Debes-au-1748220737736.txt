# Rol del asistente  
Eres el desarrollador principal del proyecto **Invenor** en Replit. Debes **automatizar** la traducción de **TODO** el sitio de una sola vez, sin dejar ni una sola cadena hard-coded, garantizando que al cambiar el idioma (ES/EN) **cada** texto en pantalla se actualice.

---

## Pasos (ejecutar en bloque único)

1. **Generar listado de cadenas**  
   - Escanea todos los archivos bajo `src/pages/**/*.tsx` y `src/components/**/*.tsx`.  
   - Extrae cada literal de texto (cualquier string en JSX: `<h1>`, `<p>`, props `label="…"`, placeholders, alt, etc.).  
   - Crea un CSV temporal `src/locales/keys.csv` con columnas `key,text` que incluyan **todas** las cadenas del sitio.  
     ```
     key,text
     home.hero.title,Invenor — Infraestructura que se convierte en rentabilidad.
     home.hero.subtitle,Desarrollamos activos estratégicos en el norte de Chile...
     about.title,Quiénes Somos
     contact.form.submit,Enviar
     footer.contact.email,contacto@invenor.cl
     …
     ```

2. **Crear JSON de traducciones**  
   - A partir de `keys.csv`, genera dos archivos JSON en `src/locales/es.json` y `src/locales/en.json` con formato:
     ```json
     {
       "home.hero.title": "Invenor — Infraestructura que se convierte en rentabilidad.",
       "home.hero.subtitle": "Desarrollamos activos estratégicos en el norte de Chile...",
       "about.title": "Quiénes Somos",
       "contact.form.submit": "Enviar",
       "footer.contact.email": "contacto@invenor.cl",
       …
     }
     ```
   - En `en.json`, deja los valores como `"TODO: translate"` para cada clave.

3. **Configurar i18n**  
   - Instala dependencias:
     ```
     npm install i18next react-i18next
     ```  
   - Crea `src/i18n.ts`:
     ```ts
     import i18n from 'i18next';
     import { initReactI18next } from 'react-i18next';
     import en from '@/locales/en.json';
     import es from '@/locales/es.json';

     i18n
       .use(initReactI18next)
       .init({
         resources: { en: { translation: en }, es: { translation: es } },
         lng: 'es',
         fallbackLng: 'es',
         interpolation: { escapeValue: false },
       });

     export default i18n;
     ```
   - En `src/main.tsx` o `App.tsx`, importa `import './i18n';` y envuelve `<App />` en `<I18nextProvider i18n={i18n}>`.

4. **Reemplazar literales por `t()`**  
   - Para **cada** `key,text` en el CSV:  
     - Abre el archivo donde aparece el literal `text`.  
     - Sustituye la cadena por `{t('key')}` en JSX y en atributos:
       ```diff
       - <h1>Invenor — Infraestructura que se convierte en rentabilidad.</h1>
       + <h1>{t('home.hero.title')}</h1>
       ```
       ```diff
       - <button title="Enviar">Enviar</button>
       + <button title={t('contact.form.submit')}>{t('contact.form.submit')}</button>
       ```
     - Añade `import { useTranslation } from 'react-i18next';` y dentro del componente:
       ```ts
       const { t } = useTranslation();
       ```
   - Repite hasta que **no quede ningún** string hard-coded en `.tsx`.

5. **Crear selector de idioma**  
   - Elimina todo el código y componentes del theme toggle.  
   - Crea `components/LanguageToggle.tsx`:
     ```tsx
     import { useTranslation } from 'react-i18next';

     export function LanguageToggle() {
       const { i18n } = useTranslation();
       return (
         <div className="flex space-x-2">
           {['es','en'].map(lang => (
             <button
               key={lang}
               onClick={() => i18n.changeLanguage(lang)}
               className={i18n.language === lang ? 'font-bold underline' : ''}
             >
               {lang.toUpperCase()}
             </button>
           ))}
         </div>
       );
     }
     ```
   - Inserta `<LanguageToggle />` en el **Header** en lugar del toggle de tema.

6. **Verificación exhaustiva**  
   - Ejecuta la app y navega a **todas** las rutas (Home, About, Opportunities, Projections, Contact, Footer).  
   - Cambia idioma con el selector y verifica que **TODO** el contenido (títulos, subtítulos, botones, placeholders, mensajes de validación, alt de imágenes, etc.) cambia acorde a las traducciones.  
   - Ajusta tamaños y espaciados donde sea necesario para textos en inglés.  
   - (Opcional) Añade un test en `LanguageToggle.test.tsx` que valide que `i18n.changeLanguage()` actualiza `document.documentElement.lang`.

---

**Al completar todas estas tareas en bloque**, responde exactamente:  
✅ **Internacionalización completa: todo el sitio bajo `t()`, selector ES/EN operativo y sin textos hard-coded.**
